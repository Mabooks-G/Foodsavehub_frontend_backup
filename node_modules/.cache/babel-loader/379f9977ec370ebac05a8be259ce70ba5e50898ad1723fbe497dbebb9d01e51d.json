{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isack\\\\OneDrive\\\\Desktop\\\\3rd Year Docs\\\\Semester 2\\\\EPE 321 - Software Engineering\\\\foodsave-hub\\\\client\\\\src\\\\donation_coordination\\\\donor.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport supabase from \"../supabaseClient\";\nimport \"./charity.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroceryList = () => {\n  _s();\n  var _location$state, _location$state2;\n  const navigate = useNavigate();\n  const location = useLocation();\n  const foodbank = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.foodbank) || {\n    name: \"[UserName]\"\n  };\n  const userId = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.userId) || null;\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [foodItems, setFoodItems] = useState([]);\n  const [fetchError, setFetchError] = useState(null);\n  const [notification, setNotification] = useState(\"\");\n  const [notificationType, setNotificationType] = useState(\"success\"); // success or warning\n\n  // Fetch food items\n  useEffect(() => {\n    if (!userId) {\n      setFetchError(\"No stakeholder ID provided.\");\n      return;\n    }\n    const fetchItems = async () => {\n      const {\n        data,\n        error\n      } = await supabase.from(\"fooditemdb\").select(\"fooditemid, name, Measure_per_Unit, Unit, quantity, expirydate\").eq(\"stakeholderid\", userId);\n      if (error) {\n        setFetchError(\"Could not fetch food items.\");\n        setFoodItems([]);\n        return;\n      }\n      const now = new Date();\n      const cutoff = new Date(now.getTime() + 48 * 60 * 60 * 1000);\n      const filteredItems = (data || []).filter(item => {\n        if (!item.expirydate) return true;\n        const expiry = new Date(item.expirydate);\n        return expiry > cutoff;\n      });\n      setFoodItems(filteredItems);\n      setFetchError(null);\n    };\n    fetchItems();\n  }, [userId]);\n  const handleSelect = item => {\n    setSelectedItems(prev => prev.includes(item) ? prev.filter(i => i !== item) : [...prev, item]);\n  };\n  const generateDonationId = async () => {\n    try {\n      const {\n        data\n      } = await supabase.from(\"donationdb\").select(\"donationid\").order(\"donationid\", {\n        ascending: false\n      }).limit(1);\n      if (!data || data.length === 0) return \"d001\";\n      const lastId = data[0].donationid;\n      const lastNum = parseInt(lastId.replace(\"d\", \"\"), 10);\n      return `d${String(lastNum + 1).padStart(3, \"0\")}`;\n    } catch {\n      return `d${String(Math.floor(1 + Math.random() * 999)).padStart(3, \"0\")}`;\n    }\n  };\n  const handleSendDonation = async () => {\n    if (selectedItems.length === 0) {\n      setNotification(\"Please select at least one item to donate.\");\n      setNotificationType(\"warning\");\n      setTimeout(() => setNotification(\"\"), 3000);\n      return;\n    }\n    try {\n      const itemsToSave = selectedItems.map(label => {\n        const [name] = label.split(\" (\");\n        return {\n          name: name.trim()\n        };\n      });\n      const newDonationId = await generateDonationId();\n      const {\n        error\n      } = await supabase.from(\"donationdb\").insert([{\n        donationid: newDonationId,\n        donationstatus: \"pending\",\n        charityid: foodbank.stakeholderid,\n        stakeholderid: userId,\n        donation_items: itemsToSave\n      }]);\n      if (error) throw error;\n      setNotification(`Donation sent to ${foodbank.name}`);\n      setNotificationType(\"success\");\n      setSelectedItems([]);\n      setTimeout(() => setNotification(\"\"), 3000);\n    } catch {\n      setNotification(\"Could not send donation. Please try again.\");\n      setNotificationType(\"warning\");\n      setTimeout(() => setNotification(\"\"), 3000);\n    }\n  };\n\n  // Realtime subscription for approval/decline\n  useEffect(() => {\n    if (!userId) return;\n    const channel = supabase.channel(`donation-updates-${userId}`).on(\"postgres_changes\", {\n      event: \"UPDATE\",\n      schema: \"public\",\n      table: \"donationdb\",\n      filter: `stakeholderid=eq.${userId}`\n    }, payload => {\n      const {\n        donationstatus,\n        donationid\n      } = payload.new;\n      if (donationstatus === \"approved\") {\n        setNotification(`Donation ${donationid} has been approved!`);\n        setNotificationType(\"success\");\n      } else if (donationstatus === \"unapproved\") {\n        setNotification(`Donation ${donationid} has been declined.`);\n        setNotificationType(\"warning\");\n      }\n      setTimeout(() => setNotification(\"\"), 3000);\n    }).subscribe();\n    return () => supabase.removeChannel(channel);\n  }, [userId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grocery-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-btn\",\n      onClick: () => navigate(\"/donor\"),\n      children: \"\\u2190 Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Donate to \", foodbank.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Select items to donate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), fetchError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: fetchError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 22\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `inline-notification ${notificationType}`,\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"food-list green-bg\",\n      children: foodItems.map(item => {\n        const itemLabel = `${item.name} (${item.Measure_per_Unit} ${item.Unit}, quantity: ${item.quantity})`;\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"food-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedItems.includes(itemLabel),\n            onChange: () => handleSelect(itemLabel)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this), itemLabel, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              fontSize: \"0.8em\",\n              color: \"#666\"\n            },\n            children: [\"(expires \", item.expirydate ? new Date(item.expirydate).toLocaleDateString() : \"N/A\", \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, item.fooditemid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-send\",\n      onClick: handleSendDonation,\n      children: \"Send Donation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s(GroceryList, \"rSSBTp9VDi1/pKLSx6WNrvYZMhw=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = GroceryList;\nexport default GroceryList;\nvar _c;\n$RefreshReg$(_c, \"GroceryList\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","supabase","jsxDEV","_jsxDEV","GroceryList","_s","_location$state","_location$state2","navigate","location","foodbank","state","name","userId","selectedItems","setSelectedItems","foodItems","setFoodItems","fetchError","setFetchError","notification","setNotification","notificationType","setNotificationType","fetchItems","data","error","from","select","eq","now","Date","cutoff","getTime","filteredItems","filter","item","expirydate","expiry","handleSelect","prev","includes","i","generateDonationId","order","ascending","limit","length","lastId","donationid","lastNum","parseInt","replace","String","padStart","Math","floor","random","handleSendDonation","setTimeout","itemsToSave","map","label","split","trim","newDonationId","insert","donationstatus","charityid","stakeholderid","donation_items","channel","on","event","schema","table","payload","new","subscribe","removeChannel","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","itemLabel","Measure_per_Unit","Unit","quantity","type","checked","onChange","style","fontSize","color","toLocaleDateString","fooditemid","_c","$RefreshReg$"],"sources":["C:/Users/isack/OneDrive/Desktop/3rd Year Docs/Semester 2/EPE 321 - Software Engineering/foodsave-hub/client/src/donation_coordination/donor.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport supabase from \"../supabaseClient\";\r\nimport \"./charity.css\";\r\n\r\nconst GroceryList = () => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const foodbank = location.state?.foodbank || { name: \"[UserName]\" };\r\n  const userId = location.state?.userId || null;\r\n\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [foodItems, setFoodItems] = useState([]);\r\n  const [fetchError, setFetchError] = useState(null);\r\n  const [notification, setNotification] = useState(\"\"); \r\n  const [notificationType, setNotificationType] = useState(\"success\"); // success or warning\r\n\r\n  // Fetch food items\r\n  useEffect(() => {\r\n    if (!userId) {\r\n      setFetchError(\"No stakeholder ID provided.\");\r\n      return;\r\n    }\r\n\r\n    const fetchItems = async () => {\r\n      const { data, error } = await supabase\r\n        .from(\"fooditemdb\")\r\n        .select(\"fooditemid, name, Measure_per_Unit, Unit, quantity, expirydate\")\r\n        .eq(\"stakeholderid\", userId);\r\n\r\n      if (error) {\r\n        setFetchError(\"Could not fetch food items.\");\r\n        setFoodItems([]);\r\n        return;\r\n      }\r\n\r\n      const now = new Date();\r\n      const cutoff = new Date(now.getTime() + 48 * 60 * 60 * 1000);\r\n\r\n      const filteredItems = (data || []).filter((item) => {\r\n        if (!item.expirydate) return true;\r\n        const expiry = new Date(item.expirydate);\r\n        return expiry > cutoff;\r\n      });\r\n\r\n      setFoodItems(filteredItems);\r\n      setFetchError(null);\r\n    };\r\n\r\n    fetchItems();\r\n  }, [userId]);\r\n\r\n  const handleSelect = (item) => {\r\n    setSelectedItems((prev) =>\r\n      prev.includes(item) ? prev.filter((i) => i !== item) : [...prev, item]\r\n    );\r\n  };\r\n\r\n  const generateDonationId = async () => {\r\n    try {\r\n      const { data } = await supabase\r\n        .from(\"donationdb\")\r\n        .select(\"donationid\")\r\n        .order(\"donationid\", { ascending: false })\r\n        .limit(1);\r\n\r\n      if (!data || data.length === 0) return \"d001\";\r\n\r\n      const lastId = data[0].donationid;\r\n      const lastNum = parseInt(lastId.replace(\"d\", \"\"), 10);\r\n      return `d${String(lastNum + 1).padStart(3, \"0\")}`;\r\n    } catch {\r\n      return `d${String(Math.floor(1 + Math.random() * 999)).padStart(3, \"0\")}`;\r\n    }\r\n  };\r\n\r\n  const handleSendDonation = async () => {\r\n    if (selectedItems.length === 0) {\r\n      setNotification(\"Please select at least one item to donate.\");\r\n      setNotificationType(\"warning\");\r\n      setTimeout(() => setNotification(\"\"), 3000);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const itemsToSave = selectedItems.map((label) => {\r\n        const [name] = label.split(\" (\");\r\n        return { name: name.trim() };\r\n      });\r\n\r\n      const newDonationId = await generateDonationId();\r\n\r\n      const { error } = await supabase.from(\"donationdb\").insert([\r\n        {\r\n          donationid: newDonationId,\r\n          donationstatus: \"pending\",\r\n          charityid: foodbank.stakeholderid,\r\n          stakeholderid: userId,\r\n          donation_items: itemsToSave,\r\n        },\r\n      ]);\r\n\r\n      if (error) throw error;\r\n\r\n      setNotification(`Donation sent to ${foodbank.name}`);\r\n      setNotificationType(\"success\");\r\n      setSelectedItems([]);\r\n      setTimeout(() => setNotification(\"\"), 3000);\r\n\r\n    } catch {\r\n      setNotification(\"Could not send donation. Please try again.\");\r\n      setNotificationType(\"warning\");\r\n      setTimeout(() => setNotification(\"\"), 3000);\r\n    }\r\n  };\r\n\r\n  // Realtime subscription for approval/decline\r\n  useEffect(() => {\r\n    if (!userId) return;\r\n\r\n    const channel = supabase\r\n      .channel(`donation-updates-${userId}`)\r\n      .on(\r\n        \"postgres_changes\",\r\n        {\r\n          event: \"UPDATE\",\r\n          schema: \"public\",\r\n          table: \"donationdb\",\r\n          filter: `stakeholderid=eq.${userId}`,\r\n        },\r\n        (payload) => {\r\n          const { donationstatus, donationid } = payload.new;\r\n          if (donationstatus === \"approved\") {\r\n            setNotification(`Donation ${donationid} has been approved!`);\r\n            setNotificationType(\"success\");\r\n          } else if (donationstatus === \"unapproved\") {\r\n            setNotification(`Donation ${donationid} has been declined.`);\r\n            setNotificationType(\"warning\");\r\n          }\r\n          setTimeout(() => setNotification(\"\"), 3000);\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => supabase.removeChannel(channel);\r\n  }, [userId]);\r\n\r\n  return (\r\n    <div className=\"grocery-container\">\r\n      <button className=\"back-btn\" onClick={() => navigate(\"/donor\")}>\r\n        ← Back\r\n      </button>\r\n\r\n      <h3>Donate to {foodbank.name}</h3>\r\n      <p>Select items to donate</p>\r\n\r\n      {fetchError && <p>{fetchError}</p>}\r\n\r\n      {/* Inline notification */}\r\n      {notification && (\r\n        <span className={`inline-notification ${notificationType}`}>\r\n          {notification}\r\n        </span>\r\n      )}\r\n\r\n      <div className=\"food-list green-bg\">\r\n        {foodItems.map((item) => {\r\n          const itemLabel = `${item.name} (${item.Measure_per_Unit} ${item.Unit}, quantity: ${item.quantity})`;\r\n          return (\r\n            <label key={item.fooditemid} className=\"food-item\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={selectedItems.includes(itemLabel)}\r\n                onChange={() => handleSelect(itemLabel)}\r\n              />\r\n              {itemLabel}{\" \"}\r\n              <span style={{ fontSize: \"0.8em\", color: \"#666\" }}>\r\n                (expires {item.expirydate ? new Date(item.expirydate).toLocaleDateString() : \"N/A\"})\r\n              </span>\r\n            </label>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      <button className=\"btn-send\" onClick={handleSendDonation}>\r\n        Send Donation\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroceryList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}