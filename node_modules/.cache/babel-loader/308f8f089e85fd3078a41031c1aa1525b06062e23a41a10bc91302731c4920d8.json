{"ast":null,"code":"// src/services/chatServices.js\n// THIS FILE MUST HAVE THE PATHS CHANGED TO THE BACKEND SERVER\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added backend call to retrieve stakeholder ID\n   Description: Fetches the stakeholderid for a given email from the backend\n*/\nconst API_BACKEND = process.env.REACT_APP_API_BACKEND;\nexport const getStakeholderId = async email => {\n  const res = await fetch(`${API_BACKEND}/supabase/getStakeholderId`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email\n    })\n  });\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(`Backend error: ${res.status} ${text}`);\n  }\n  return res.json();\n};\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added user chat fetching\n   Description: Retrieves all chats for a user since an optional timestamp\n*/\nexport async function getUserChats(email, since = null) {\n  const res = await fetch(`${API_BACKEND}/supabase/getUserChats`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      since\n    })\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch user chats\");\n  return res.json();\n}\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added chat update function\n   Description: Sends a new chat message (ciphertext + iv) to the backend\n*/\nexport async function updateChatHistory(donationid, senderid, chathistory, iv = null) {\n  const res = await fetch(`${API_BACKEND}/supabase/updateChatHistory`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      donationid,\n      senderid,\n      chathistory,\n      iv\n    })\n  });\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(`Failed to update chat history: ${res.status} ${text}`);\n  }\n  return res.json();\n}\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added read receipt marking\n   Description: Marks all messages as read for a donation, excluding the current user\n*/\nexport async function markChatRead(donationid, currentUserId) {\n  const res = await fetch(`${API_BACKEND}/supabase/markChatRead`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      donationid,\n      currentUserId\n    })\n  });\n  if (!res.ok) throw new Error(\"Failed to mark chat read\");\n  return res.json();\n}\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added delivery receipt marking\n   Description: Marks all messages as delivered for a donation, excluding the sender\n*/\nexport async function markDelivered(donationid, userId) {\n  const res = await fetch(`/supabase/markDelivered`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      donationid,\n      userId\n    })\n  });\n  if (!res.ok) throw new Error(\"Failed to mark delivered\");\n  return res.json();\n}","map":{"version":3,"names":["API_BACKEND","process","env","REACT_APP_API_BACKEND","getStakeholderId","email","res","fetch","method","headers","body","JSON","stringify","ok","text","Error","status","json","getUserChats","since","updateChatHistory","donationid","senderid","chathistory","iv","markChatRead","currentUserId","markDelivered","userId"],"sources":["C:/Users/Gift Mabokela/Documents/3rd year/2nd Sem/EPE 321/Practical/foodsave-hub/client/src/communication/services/chatServices.js"],"sourcesContent":["// src/services/chatServices.js\n// THIS FILE MUST HAVE THE PATHS CHANGED TO THE BACKEND SERVER\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added backend call to retrieve stakeholder ID\n   Description: Fetches the stakeholderid for a given email from the backend\n*/\nconst API_BACKEND = process.env.REACT_APP_API_BACKEND;\nexport const getStakeholderId = async (email) => {\n  const res = await fetch(`${API_BACKEND}/supabase/getStakeholderId`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email }),\n  });\n\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(`Backend error: ${res.status} ${text}`);\n  }\n\n  return res.json();\n};\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added user chat fetching\n   Description: Retrieves all chats for a user since an optional timestamp\n*/\nexport async function getUserChats(email, since = null) {\n  const res = await fetch(`${API_BACKEND}/supabase/getUserChats`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, since }),\n  });\n\n  if (!res.ok) throw new Error(\"Failed to fetch user chats\");\n  return res.json();\n}\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added chat update function\n   Description: Sends a new chat message (ciphertext + iv) to the backend\n*/\nexport async function updateChatHistory(donationid, senderid, chathistory, iv = null) {\n  const res = await fetch(`${API_BACKEND}/supabase/updateChatHistory`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ donationid, senderid, chathistory, iv }),\n  });\n\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(`Failed to update chat history: ${res.status} ${text}`);\n  }\n\n  return res.json();\n}\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added read receipt marking\n   Description: Marks all messages as read for a donation, excluding the current user\n*/\nexport async function markChatRead(donationid, currentUserId) {\n  const res = await fetch(`${API_BACKEND}/supabase/markChatRead`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ donationid, currentUserId }),\n  });\n\n  if (!res.ok) throw new Error(\"Failed to mark chat read\");\n  return res.json();\n}\n\n/* Author: Lethabo Mazui\n   Event: Sprint 1\n   LatestUpdate: Added delivery receipt marking\n   Description: Marks all messages as delivered for a donation, excluding the sender\n*/\nexport async function markDelivered(donationid, userId) {\n  const res = await fetch(`/supabase/markDelivered`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ donationid, userId }),\n  });\n\n  if (!res.ok) throw new Error(\"Failed to mark delivered\");\n  return res.json();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}