{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\letha\\\\Downloads\\\\EPE Sem Project - the Reclone\\\\foodsave-hub\\\\client\\\\src\\\\communication\\\\Components\\\\ChatList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useMemo, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ChatContext from './ChatContext';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './ChatList.css';\n\n/* Author: Lethabo Mazui\r\n   Event: Sprint 1\r\n   LatestUpdate: Added ChatList component\r\n   Description: Displays the list of all chats for the current user and handles navigation to ChatThread\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatList() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    channels,\n    setChannels,\n    markChatRead,\n    currentUserEmail,\n    currentUserId\n  } = useContext(ChatContext);\n  const prevUnreadRef = useRef(0);\n\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Removed duplicate polling (now relies on ChatContext)\r\n     Description: ChatList now consumes chats directly from ChatContext instead of fetching independently\r\n  */\n  useEffect(() => {\n    // No need to fetch here; ChatContext handles polling + decryption\n  }, [currentUserEmail]);\n\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Grouped messages by donationId\r\n     Description: Groups all chat messages by their donation for display\r\n  */\n  const donationChats = useMemo(() => {\n    const grouped = Object.values(channels.reduce((acc, msg) => {\n      if (!acc[msg.donationid]) {\n        const otherMsg = channels.find(m => m.donationid === msg.donationid && m.senderid !== currentUserId);\n        let otherParticipantName = '';\n        let avatarEmoji = '🍏';\n        if (otherMsg) {\n          otherParticipantName = otherMsg.senderName || otherMsg.charityName || 'Unknown';\n          avatarEmoji = otherMsg.icon || '🍏';\n        } else {\n          otherParticipantName = msg.charityName || 'Unknown';\n          avatarEmoji = msg.icon || '🍏';\n        }\n        acc[msg.donationid] = {\n          donationid: msg.donationid,\n          messages: [],\n          participantName: otherParticipantName,\n          avatarEmoji: avatarEmoji\n        };\n      }\n      acc[msg.donationid].messages.push(msg);\n      return acc;\n    }, {}));\n    return grouped;\n  }, [channels, currentUserId]);\n\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Sorted chats by most recent message\r\n     Description: Orders the grouped chats so the most recent messages appear first\r\n  */\n  const sortedChannels = useMemo(() => {\n    return donationChats.sort((a, b) => {\n      var _a$messages, _b$messages;\n      const aTime = (_a$messages = a.messages[a.messages.length - 1]) !== null && _a$messages !== void 0 && _a$messages.message_timestamp ? new Date(a.messages[a.messages.length - 1].message_timestamp) : new Date(0);\n      const bTime = (_b$messages = b.messages[b.messages.length - 1]) !== null && _b$messages !== void 0 && _b$messages.message_timestamp ? new Date(b.messages[b.messages.length - 1].message_timestamp) : new Date(0);\n      return bTime - aTime;\n    });\n  }, [donationChats]);\n\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Added unread message toast\r\n     Description: Displays a notification toast when new unread messages are received\r\n  */\n  useEffect(() => {\n    const totalUnread = channels.filter(m => !m.readreceipts && m.senderid !== currentUserId).length;\n    if (totalUnread > prevUnreadRef.current) {\n      const newMessages = totalUnread - prevUnreadRef.current - 1;\n      toast.info(`📩 You have ${newMessages} new unread message${newMessages > 1 ? 's' : ''}`);\n    }\n    // Update navbar badge\n    setUnreadMessagesCount(totalUnread);\n    prevUnreadRef.current = totalUnread;\n  }, [channels, currentUserId]);\n\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Added chat opening logic\r\n     Description: Marks messages as read and navigates to the ChatThread for the selected donation\r\n  */\n  const handleOpenChat = async (donationId, participantName, avatarEmoji) => {\n    setChannels(prev => prev.map(msg => msg.donationid === donationId && msg.senderid !== currentUserId ? {\n      ...msg,\n      readreceipts: true\n    } : msg));\n    await markChatRead(donationId);\n    navigate(`/chats/${donationId}`, {\n      state: {\n        participantName,\n        avatarEmoji\n      }\n    });\n  };\n\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Added render\r\n     Description: Renders the chat list page including chat previews, unread counts, and toast container\r\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-page\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-right\",\n      autoClose: 4000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-button\",\n        onClick: () => navigate('/communication'),\n        children: \"\\u2190 Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"My Chats (\", currentUserEmail, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), !currentUserEmail || !currentUserId ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading chats...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this) : sortedChannels.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"No chats found for \", currentUserEmail, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-list\",\n      children: sortedChannels.map(channel => {\n        const lastMsg = channel.messages[channel.messages.length - 1];\n        const lastMessage = (lastMsg === null || lastMsg === void 0 ? void 0 : lastMsg.chathistory) || 'Start a conversation...';\n        const unreadCount = lastMessage === 'Start a conversation...' ? 0 : channel.messages.filter(m => !m.readreceipts && m.senderid !== currentUserId).length;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-preview\",\n          onClick: () => handleOpenChat(channel.donationid, channel.participantName, channel.avatarEmoji),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-avatar\",\n            children: channel.avatarEmoji\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-name\",\n              children: [channel.participantName, /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"dot\",\n                children: \"\\xB7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"donation-id\",\n                children: [\"Donation #\", channel.donationid]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-last-message\",\n              children: lastMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"unread-count\",\n            children: unreadCount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 37\n          }, this)]\n        }, channel.donationid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatList, \"OYAfBu/OAC6wd9RwIJPksubxc1s=\", false, function () {\n  return [useNavigate];\n});\n_c = ChatList;\nvar _c;\n$RefreshReg$(_c, \"ChatList\");","map":{"version":3,"names":["React","useContext","useEffect","useMemo","useRef","useNavigate","ChatContext","toast","ToastContainer","jsxDEV","_jsxDEV","ChatList","_s","navigate","channels","setChannels","markChatRead","currentUserEmail","currentUserId","prevUnreadRef","donationChats","grouped","Object","values","reduce","acc","msg","donationid","otherMsg","find","m","senderid","otherParticipantName","avatarEmoji","senderName","charityName","icon","messages","participantName","push","sortedChannels","sort","a","b","_a$messages","_b$messages","aTime","length","message_timestamp","Date","bTime","totalUnread","filter","readreceipts","current","newMessages","info","setUnreadMessagesCount","handleOpenChat","donationId","prev","map","state","className","children","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","fileName","_jsxFileName","lineNumber","columnNumber","onClick","channel","lastMsg","lastMessage","chathistory","unreadCount","_c","$RefreshReg$"],"sources":["C:/Users/letha/Downloads/EPE Sem Project - the Reclone/foodsave-hub/client/src/communication/Components/ChatList.jsx"],"sourcesContent":["import React, { useContext, useEffect, useMemo, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ChatContext from './ChatContext';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './ChatList.css';\r\n\r\n/* Author: Lethabo Mazui\r\n   Event: Sprint 1\r\n   LatestUpdate: Added ChatList component\r\n   Description: Displays the list of all chats for the current user and handles navigation to ChatThread\r\n*/\r\nexport default function ChatList() {\r\n  const navigate = useNavigate();\r\n  const { channels, setChannels, markChatRead, currentUserEmail, currentUserId } = useContext(ChatContext);\r\n  const prevUnreadRef = useRef(0);\r\n\r\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Removed duplicate polling (now relies on ChatContext)\r\n     Description: ChatList now consumes chats directly from ChatContext instead of fetching independently\r\n  */\r\n  useEffect(() => {\r\n    // No need to fetch here; ChatContext handles polling + decryption\r\n  }, [currentUserEmail]);\r\n\r\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Grouped messages by donationId\r\n     Description: Groups all chat messages by their donation for display\r\n  */\r\n  const donationChats = useMemo(() => {\r\n    const grouped = Object.values(\r\n      channels.reduce((acc, msg) => {\r\n        if (!acc[msg.donationid]) {\r\n          const otherMsg = channels.find(\r\n            m => m.donationid === msg.donationid && m.senderid !== currentUserId\r\n          );\r\n\r\n          let otherParticipantName = '';\r\n          let avatarEmoji = '🍏';\r\n\r\n          if (otherMsg) {\r\n            otherParticipantName = otherMsg.senderName || otherMsg.charityName || 'Unknown';\r\n            avatarEmoji = otherMsg.icon || '🍏';\r\n          } else {\r\n            otherParticipantName = msg.charityName || 'Unknown';\r\n            avatarEmoji = msg.icon || '🍏';\r\n          }\r\n\r\n          acc[msg.donationid] = {\r\n            donationid: msg.donationid,\r\n            messages: [],\r\n            participantName: otherParticipantName,\r\n            avatarEmoji: avatarEmoji,\r\n          };\r\n        }\r\n\r\n        acc[msg.donationid].messages.push(msg);\r\n        return acc;\r\n      }, {})\r\n    );\r\n\r\n    return grouped;\r\n  }, [channels, currentUserId]);\r\n\r\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Sorted chats by most recent message\r\n     Description: Orders the grouped chats so the most recent messages appear first\r\n  */\r\n  const sortedChannels = useMemo(() => {\r\n    return donationChats.sort((a, b) => {\r\n      const aTime = a.messages[a.messages.length - 1]?.message_timestamp\r\n        ? new Date(a.messages[a.messages.length - 1].message_timestamp)\r\n        : new Date(0);\r\n      const bTime = b.messages[b.messages.length - 1]?.message_timestamp\r\n        ? new Date(b.messages[b.messages.length - 1].message_timestamp)\r\n        : new Date(0);\r\n      return bTime - aTime;\r\n    });\r\n  }, [donationChats]);\r\n\r\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Added unread message toast\r\n     Description: Displays a notification toast when new unread messages are received\r\n  */\r\n  useEffect(() => {\r\n    const totalUnread = channels.filter(\r\n      m => !m.readreceipts && m.senderid !== currentUserId\r\n    ).length;\r\n\r\n    if (totalUnread > prevUnreadRef.current) {\r\n      const newMessages = totalUnread - prevUnreadRef.current -1 ;\r\n      toast.info(`📩 You have ${newMessages} new unread message${newMessages > 1 ? 's' : ''}`);\r\n    }\r\n    // Update navbar badge\r\n    setUnreadMessagesCount(totalUnread);\r\n\r\n    prevUnreadRef.current = totalUnread;\r\n  }, [channels, currentUserId]);\r\n\r\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Added chat opening logic\r\n     Description: Marks messages as read and navigates to the ChatThread for the selected donation\r\n  */\r\n  const handleOpenChat = async (donationId, participantName, avatarEmoji) => {\r\n    setChannels(prev =>\r\n      prev.map(msg =>\r\n        msg.donationid === donationId && msg.senderid !== currentUserId\r\n          ? { ...msg, readreceipts: true }\r\n          : msg\r\n      )\r\n    );\r\n\r\n    await markChatRead(donationId);\r\n\r\n    navigate(`/chats/${donationId}`, {\r\n      state: { participantName, avatarEmoji }\r\n    });\r\n  };\r\n\r\n  /* Author: Lethabo Mazui\r\n     Event: Sprint 1\r\n     LatestUpdate: Added render\r\n     Description: Renders the chat list page including chat previews, unread counts, and toast container\r\n  */\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <ToastContainer position=\"top-right\" autoClose={4000} hideProgressBar closeOnClick pauseOnHover />\r\n      <div className=\"chat-header\">\r\n        <button className=\"back-button\" onClick={() => navigate('/communication')}>← Back</button>\r\n        <h2>My Chats ({currentUserEmail})</h2>\r\n      </div>\r\n\r\n      {(!currentUserEmail || !currentUserId) ? (\r\n        <p>Loading chats...</p>\r\n      ) : sortedChannels.length === 0 ? (\r\n        <p>No chats found for {currentUserEmail}.</p>\r\n      ) : (\r\n        <div className=\"chat-list\">\r\n          {sortedChannels.map(channel => {\r\n            const lastMsg = channel.messages[channel.messages.length - 1];\r\n            const lastMessage = lastMsg?.chathistory || 'Start a conversation...';\r\n\r\n            const unreadCount = lastMessage === 'Start a conversation...'\r\n              ? 0\r\n              : channel.messages.filter(\r\n                  m => !m.readreceipts && m.senderid !== currentUserId\r\n                ).length;\r\n\r\n            return (\r\n              <div\r\n                key={channel.donationid}\r\n                className=\"chat-preview\"\r\n                onClick={() => handleOpenChat(channel.donationid, channel.participantName, channel.avatarEmoji)}\r\n              >\r\n                <div className=\"chat-avatar\">{channel.avatarEmoji}</div>\r\n                <div className=\"chat-info\">\r\n                  <div className=\"chat-name\">\r\n                    {channel.participantName}\r\n                    <span className=\"dot\">·</span>\r\n                    <span className=\"donation-id\">Donation #{channel.donationid}</span>\r\n                  </div>\r\n                  <div className=\"chat-last-message\">{lastMessage}</div>\r\n                </div>\r\n                {unreadCount > 0 && <div className=\"unread-count\">{unreadCount}</div>}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}