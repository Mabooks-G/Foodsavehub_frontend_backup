{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\isack\\\\OneDrive\\\\Desktop\\\\3rd Year Docs\\\\Semester 2\\\\EPE 321 - Software Engineering\\\\foodsave-hub\\\\client\\\\src\\\\database\\\\BulkUpload.js\",\n  _s = $RefreshSig$();\n// src/bulkupload/BulkUpload.js\nimport React, { useState } from \"react\";\nimport \"./BulkUpload.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BulkUpload({\n  currentUser\n}) {\n  _s();\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [preview, setPreview] = useState([]);\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (!selectedFile) return;\n    if (!selectedFile.name.endsWith(\".xlsx\")) {\n      setError(\"Invalid file type. Please upload an Excel (.xlsx) file.\");\n      setSuccess(\"\");\n      setFile(null);\n    } else {\n      setFile(selectedFile);\n      setError(\"\");\n      setSuccess(\"\");\n    }\n  };\n  const uploadFile = async () => {\n    if (!file) {\n      setError(\"Please choose an Excel (.xlsx) file.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    // Optional: include user ID if backend expects it\n    if (currentUser !== null && currentUser !== void 0 && currentUser.id) {\n      formData.append(\"userId\", currentUser.id);\n    }\n    try {\n      const res = await fetch(\"http://localhost:5000/api/bulkupload\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setSuccess(`${data.count} items uploaded successfully.`);\n        setError(\"\");\n        setPreview([]);\n      } else {\n        setError(data.error || \"Validation failed\");\n        setSuccess(\"\");\n        if (data.details) console.warn(data.details);\n      }\n    } catch (err) {\n      setError(`Server error: ${err.message}`);\n      setSuccess(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bulk-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"bulk-title\",\n      children: \"Bulk Upload Excel (.xlsx)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".xlsx\",\n      onChange: handleFileChange,\n      className: \"bulk-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: uploadFile,\n      className: \"bulk-btn\",\n      children: \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bulk-error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bulk-success\",\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(BulkUpload, \"NgyTUb3gO2pl4GYB7WhBJGUiYAo=\");\n_c = BulkUpload;\nvar _c;\n$RefreshReg$(_c, \"BulkUpload\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","BulkUpload","currentUser","_s","file","setFile","error","setError","success","setSuccess","preview","setPreview","handleFileChange","e","selectedFile","target","files","name","endsWith","uploadFile","formData","FormData","append","id","res","fetch","method","body","data","json","ok","count","details","console","warn","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/isack/OneDrive/Desktop/3rd Year Docs/Semester 2/EPE 321 - Software Engineering/foodsave-hub/client/src/database/BulkUpload.js"],"sourcesContent":["// src/bulkupload/BulkUpload.js\r\nimport React, { useState } from \"react\";\r\nimport \"./BulkUpload.css\";\r\n\r\nexport default function BulkUpload({ currentUser }) {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(\"\");\r\n  const [success, setSuccess] = useState(\"\");\r\n  const [preview, setPreview] = useState([]);\r\n\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    if (!selectedFile) return;\r\n\r\n    if (!selectedFile.name.endsWith(\".xlsx\")) {\r\n      setError(\"Invalid file type. Please upload an Excel (.xlsx) file.\");\r\n      setSuccess(\"\");\r\n      setFile(null);\r\n    } else {\r\n      setFile(selectedFile);\r\n      setError(\"\");\r\n      setSuccess(\"\");\r\n    }\r\n  };\r\n\r\n  const uploadFile = async () => {\r\n    if (!file) {\r\n      setError(\"Please choose an Excel (.xlsx) file.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n    // Optional: include user ID if backend expects it\r\n    if (currentUser?.id) {\r\n      formData.append(\"userId\", currentUser.id);\r\n    }\r\n\r\n    try {\r\n      const res = await fetch(\"http://localhost:5000/api/bulkupload\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      const data = await res.json();\r\n\r\n      if (res.ok) {\r\n        setSuccess(`${data.count} items uploaded successfully.`);\r\n        setError(\"\");\r\n        setPreview([]);\r\n      } else {\r\n        setError(data.error || \"Validation failed\");\r\n        setSuccess(\"\");\r\n        if (data.details) console.warn(data.details);\r\n      }\r\n    } catch (err) {\r\n      setError(`Server error: ${err.message}`);\r\n      setSuccess(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bulk-container\">\r\n      <h2 className=\"bulk-title\">Bulk Upload Excel (.xlsx)</h2>\r\n\r\n      <input type=\"file\" accept=\".xlsx\" onChange={handleFileChange} className=\"bulk-input\" />\r\n      <button onClick={uploadFile} className=\"bulk-btn\">Upload</button>\r\n\r\n      {error && <div className=\"bulk-error\">{error}</div>}\r\n      {success && <div className=\"bulk-success\">{success}</div>}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}